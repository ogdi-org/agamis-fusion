openapi: 3.0.3
info:
  title: Fusion API
  description: OpenAPI 3.0.3 specification for Fusion REST API 1.0.0
  version: 1.0.0
 
servers:
  - url: https://fusion.cloud0.agamis.io/api/v1
    description: Cloud 0 (EU) main production server
  - url: https://fusion.iat.cloud.openrichmedia.org/api/v1
    description: Internal staging (Internal Acceptance Test) for ORMI testing

tags:
  - name: User
  - name: Profile

paths:
  /users:
    get:
      tags:
        - User
      summary: Returns list of users
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/CreatedAtFilter'
        - $ref: '#/components/parameters/UpdatedAtFilter'
        - in: query
          name: username
          example: cvs
          schema:
            type: string
          description: Partial or full username on which the result must be filtered
      responses:
        200:
          description: A JSON array of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserWithRelations'
        400:
          description: Bad request for users fetching
          content:
            text:
              schema:
                type: array
                items:
                  oneOf:
                    - type: string
                      example: username must be a single word
                    - type: string
                      example: limit and offset parameters are codependent and must be both or none provided
        401:
          $ref: '#/components/responses/AuthenticationRequired'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          description: User(s) not found
          content:
            text:
              schema:
                type: string
                example: A user with specified filters could not be found
        500:
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - User
      summary: Creates a new user
      parameters:
        - $ref: '#/components/parameters/Authorization'
      requestBody:
        description: A JSON representation of input user data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDto'
      responses:
        200:
          description: JSON of created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad request for users fetching
          content:
            text:
              schema:
                type: array
                items:
                  oneOf:
                    - type: string
                      example: 'Creating a user requires providing : username, password'
        401:
          $ref: '#/components/responses/AuthenticationRequired'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'
  /user/{id}:
    get:
      tags:
        - User
      summary: Gets a single user
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - in: path
          name: id
          description: id of the user to get
          required: true
          schema:
            $ref: "#/components/schemas/ID"
      responses:
        200:
          description: JSON of fetched user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserWithRelations"
        404:
          description: User not found
    put:
      tags:
        - User
      summary: Updates a single user
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - in: path
          name: id
          description: id of the user to update
          required: true
          schema:
            $ref: "#/components/schemas/ID"
      requestBody:
        description: A JSON representation of input user data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDto'
      responses:
        200:
          description: JSON of updated user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        404:
          description: User not found
    delete:
      tags:
        - User
      summary: Deletes a single user
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - in: path
          name: id
          description: id of the user to delete
          required: true
          schema:
            $ref: "#/components/schemas/ID"
      responses:
        200:
          description: JSON of deleted user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        404:
          description: User not found
  
  /profiles:
    get:
      tags:
        - Profile
      summary: Returns list of profiles
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/CreatedAtFilter'
        - $ref: '#/components/parameters/UpdatedAtFilter'
        - in: query
          name: lastname
          example: Von Stonk
          schema:
            type: string
          description: Partial or full lastname on which the result must be filtered
        - in: query
          name: firstname
          example: Chauncey
          schema:
            type: string
          description: Partial or full firstname on which the result must be filtered
        - in: query
          name: email
          schema:
            type: string
            example: chauncey.vonstonks@example.com
          description: Partial or full email on which the result must be filtered
        - in: query
          name: last_login
          schema:
            $ref: '#/components/schemas/DateFilter'
          description: A date range on which the result must be filtered
      responses:
        200:
          description: A JSON array of profiles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProfileWithRelations'
        400:
          description: Bad request for profiles fetching
          content:
            text:
              schema:
                type: array
                items:
                  oneOf:
                    - type: string
                      example: main_email is not in the good format
                    - type: string
                      example: an email is not in the good format
                    - type: string
                      example: 
                    - type: string
                      example: limit and offset parameters are codependent and must be both or none provided
        401:
          $ref: '#/components/responses/AuthenticationRequired'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          description: User(s) not found
          content:
            text:
              schema:
                type: string
                example: A user with specified filters could not be found
        500:
          $ref: '#/components/responses/InternalServerError'
  # /profile/{id}:
  #   get:

components:
  schemas:
    # Generics
    ID:
      type: string
      format: uuid

    Timed:
      type: object
      properties:
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Locale:
      type: object
      properties:
        language_id:
          type: string
          format: uuid
        language_code:
          type: string
          example: en
        text:
          type: string
    
    DateFilter:
      type: object
      properties:
        start_date:
          type: string
          format: date-time
        end_date:
          type: string
          format: date-time

    # Types
    OrganizationType:
      allOf:
      - type: object
        properties:
          id:
            $ref: '#/components/schemas/ID'
          label:
            $ref: '#/components/schemas/Locale'
      - $ref: '#/components/schemas/Timed'
    
    OrganizationTypeWithRelations:
      allOf:
        - $ref: '#/components/schemas/OrganizationType'
        - type: object
          properties:
            related_organizations:
              type: array
              items:
                $ref: '#/components/schemas/Organization'

    Organization:
      allOf:
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/ID'
            label:
              type: string
              example: The stonk foundation
            type:
              type: string
            queryable:
              type: boolean
              example: true
        - $ref: '#/components/schemas/Timed'
    
    OrganizationWithRelations:
      allOf:
        - $ref: '#/components/schemas/Organization'

    Application:
      allOf:
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/ID'
            app_universal_id:
              type: string
              example: 90074caffac3c107fa594376b90cdcfb53c3923771b0dacca4845b5e7f975c19
            label:
              type: string
              example: Agamis Fusion
            version:
              type: string
              example: 1.0.0
            status:
              type: string
              enum:
                - INSTALLED
                - NOT_INSTALLED
            manifest_url:
              type: string
              format: uri
            store_url:
              type: string
              format: uri
            organizations:
              type: array
              items:
                type: object
                properties:
                  organization:
                    $ref: '#/components/schemas/Organization'
                  status:
                    type: string
                    enum:
                      - ENABLED
                      - DISABLED
        - $ref: '#/components/schemas/Timed'
    
    FlatApplication:
      allOf:
        - $ref: '#/components/schemas/Application'

    Permission:
      allOf:
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/ID'
            key:
              type: string
              example: application.api.example.get.all
            labels:
              type: array
              items:
                $ref: '#/components/schemas/Locale'
            descriptions:
              type: array
              items:
                $ref: '#/components/schemas/Locale'
        - $ref: '#/components/schemas/Timed'

    PermissionWithRelations:
      allOf:
        - $ref: '#/components/schemas/Permission'
        - type: object
          properties:
            related_application:
              $ref: '#/components/schemas/Application'
        
    Profile:
      allOf:
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/ID'
            lastname:
              type: string
              example: Von Stonk
            firstname:
              type: string
              example: Chauncey
            main_email:
              type: string
              example: chauncey.vonstonks@example.com
            emails:
              type: array
              items:
                type: string
              example: ['myothermail@example.com','chaunceyIsHappy@example.com']
            last_login:
              type: string
              format: date-time
            user_id:
              $ref: '#/components/schemas/ID'
        - $ref: '#/components/schemas/Timed'

    ProfileWithRelations:
      allOf:
        - $ref: '#/components/schemas/Profile'
        - type: object
          properties:
            permissions:
              type: array
              items:
                $ref: '#/components/schemas/Permission'
            organization:
              $ref: '#/components/schemas/Organization'

    UserDto:
      required:
          - username
          - password
      properties:
        username:
          type: string
          example: cvs
        password:
          type: string
          example: MyNamelsChauncey%5#417

    User:
      allOf:
        - type: object
          required:
            - id
            - username
            - profiles
          properties:
            id:
              $ref: "#/components/schemas/ID"
            username:
              type: string
              example: cvs
        - $ref: '#/components/schemas/Timed'
    
    UserWithRelations:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            profiles:
              type: array
              items:
                $ref: '#/components/schemas/Profile'
  parameters:
    Authorization:
      name: AuthorizationToken
      in: cookie
      required: true
      schema:
        type: string
        format: jwt 
    PaginationOffset:
      name: offset
      in: query
      schema:
        type: integer
        minimum: 1
    PaginationSize:
      name: limit
      in: query
      schema:
        type: integer
        minimum: 1
    CreatedAtFilter:
      name: created_at
      in: query
      schema:
        $ref: '#/components/schemas/DateFilter'
      description: A date range on which the result must be filtered
    UpdatedAtFilter:
      name: updated_at
      in: query
      schema:
        $ref: '#/components/schemas/DateFilter'
      description: A date range on which the result must be filtered
          
  responses:
    AuthenticationRequired:
      description: Authentication required
      content:
        text:
          schema:
            type: string
            example: You must be authenticated to access this resource
    Forbidden:
      description: Forbidden
      content:
        text:
          schema:
            type: string
            example: You don't have the permission to access this resource
    InternalServerError:
      description: Internal server error
      content:
        text:
          schema:
            type: string
            example: 'An internal error occured caused by : {reason}'
                          
                          
